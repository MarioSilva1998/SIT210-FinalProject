import RPi.GPIO as GPIO
import datetime
import time
import random
import requests

#Set GPIO mode and disable warnings
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

#Set Servo pin
foodservopin = 18
waterservopin = 17
frequency = 50

initial_position = 0

duty_cycle_min = 2.5
duty_cycle_max = 12.5

GPIO.setup(foodservopin, GPIO.OUT)
GPIO.setup(waterservopin, GPIO.OUT)
fservo = GPIO.PWM(foodservopin, frequency)
fservo.start(0)
wservo = GPIO.PWM(waterservopin, frequency)
wservo.start(0)

# IMPORTANT: When using test parameters, comment ranges out e.g. # (datetime.time (6,0), datetime.time(7,0)) from time_ranges if current >#Time checks for pellets
time_ranges = [
        (datetime.time(6, 0), datetime.time(7,0)), #6am - 7am
        (datetime.time(12, 0), datetime.time(13,0)), #12pm - 1pm
        (datetime.time(18, 0), datetime.time(19,0)), #6pm - 7pm
        (datetime.time(0, 0), datetime.time(1,0)) #12am - 1am
]

enforce_limit = True #Email limit (every 6 hours) Set to False when testing
last_notification_time = datetime.datetime.now()

previous_weight = None #Variable to store the previous weight
test_previous = None #Testing previous variable

#Testing time parameters
test_prange = True #Change to True when testing pellet dispensing time
test_wrange = True#Change to True when testing water dispensing time

#Testing weight paremeters
#Food bowl
test_previous = 340 #Uncomment when testing (simulates previous check)
test_fweight = 335 #Testing food weight- CHANGE THIS NUMBER TO SIMULATE FOOD WEIGHT

#Water bowl
test_wweight = 360 #Testing water weight - CHANGE THIS NUMBER TO SIMULATE WATER WEIGHT

#--------------------------------------------------
#Weight Check
def foodcheck():
        #test_fweight possibly not required here.
        global previous_weight, test_fweight, test_previous#Declared as a global variable
        print("---[FOOD]---")
        print("Checking weight of food bowl...")
        detected_weight = get_weight()
        #print("Current weight is:", detected_weight,"g") #Uncomment this if using weight sensor
        print("Current weight is:", test_fweight,"g")
        '''
        #Comment next three lines out when testing
        if previous_weight is not None and abs(previous_weight - detected_weight) <= 10:
                print("Warning: Weight has not changed significantly since the last 6-hour check.")
                warningemail()'''

        if test_previous is not None and abs(test_previous - test_fweight) <=10:
                print("Test warning showing that food weight hasn't changed since last check.")
                warningemail()

        elif detected_weight <= 340 or test_fweight <= 340: #Change 340 to the weight of your bowl + 10 grams
                print("Food is low.")
                foodservo()
        elif detected_weight > 340 and detected_weight < 1000 or test_fweight > 340 and test_fweight < 1000:
                print("Food is not low. Will check again later.")
        elif detected_weight >= 1000 or test_fweight >= 1000:
                print("A rabbit has jumped in the bowl.")
        else:
                print("An error has occurred.")

        #Update previous weight with current weight
        previous_weight = detected_weight


def watercheck():
        global test_wweight
        print("---[WATER]---")
        print("Checking weight of water bowl...")
        detected_waterweight = get_waterweight()
        #print("Current weight is:", detected_waterweight,"g") #Uncomment this if using weight sensor
        print("Current weight is:", test_wweight,"g")

        if detected_waterweight <= 360 or test_wweight <= 360: #Change 360 to the weight of your bowl + 30 grams
                print("Water is low.")
                waterservo()
        elif detected_waterweight > 360 and detected_waterweight < 1000 or test_wweight > 360 and test_wweight < 1000:
                print("Water is not low. Will check again later.")
        elif detected_waterweight >= 1000 or test_wweight >= 1000:
                print("Splash! A rabbit has jumped in the bowl.")
        else:
                print("An error has occurred.")

def get_weight():
        #replace this with load cell sensor
        #return 340 #sample weight
        #return random.uniform(330, 350) #Random weight between 330 and 350 for testing
        return test_fweight #Testing weight only


def get_waterweight():
        #replace this with load cell sensor
        #return 361.5 #sample weight
        return test_wweight
		
def foodservo():
        global test_fweight
        print("Refilling food bowl...")
        set_foodangle(0)
        time.sleep(1)

        set_foodangle(40)
        time.sleep(3)

        set_foodangle(0)
        time.sleep(1)
        test_fweight = test_fweight + 5 #Adds 5 grams to test_fweight to simulate pellets being dispensed into bowl
        print("New weight:", test_fweight,"g")

        duty_cycle_min = 0
        duty_cycle_max = 0


def waterservo(): #Note, pump isn't working so I used a servo to simulate the dispensing of water
        global test_wweight
        print("Refilling water bowl...")
        set_waterangle(0)
        time.sleep(1)

        set_waterangle(60)
        time.sleep(3)

        set_waterangle(0)
        time.sleep(1)
        test_wweight = test_wweight + 100 #Adds 5 grams to test_fweight to simulate pellets being dispensed into bowl
        print("New weight:", test_wweight,"g")

        duty_cycle_min = 0
        duty_cycle_max = 0

def set_foodangle(angle):
        duty_cycle = ((angle / 180) * (duty_cycle_max - duty_cycle_min)) + duty_cycle_min
        fservo.ChangeDutyCycle(duty_cycle)
        time.sleep(0.3) #Allow time for servo to move

def set_waterangle(angle):
        duty_cycle = ((angle / 180) * (duty_cycle_max - duty_cycle_min)) + duty_cycle_min
        wservo.ChangeDutyCycle(duty_cycle)
        time.sleep(0.3) #Allow time for servo to move

def warningemail():
        global last_notification_time, enforce_limit
        current_time = datetime.datetime.now()
        time_difference = current_time - last_notification_time
        if not enforce_limit or time_difference.total_seconds() >= 6 * 60 * 60: #6 hours in seconds. Checks to see if an email has been s>

                print("Warning email has been sent.")

                #IFTTT- To do your own version, use the following template:
                #requests.post('https://maker.ifttt.com/trigger/{EVENT_NAME}/with/key/{YOUR_API_KEY}')
                requests.post('https://maker.ifttt.com/trigger/warningemail()/with/key/cnYws6C-8NytxZSNhs8cPD') #Sends warning email noti>

                #Update the last notification time
                last_notification_time = current_time
                print("Last notification time:", last_notification_time.strftime("%H:%M:%S"))
        else:
                print("Skipping email notification due to time restriction.")
#-----------------------------------------------------------------------

while True:
        current_time = datetime.datetime.now().strftime("%H:%M:%S\n")

        print("Current Time:", current_time)

        time_within_range = False
        for start_time, end_time in time_ranges:
                if start_time <= datetime.datetime.now().time() <= end_time:
                        time_within_range = True
                        break

        #Food ---------------
        if time_within_range:
                foodcheck()

        elif test_prange is True:
                print("Testing food bowl in progress:\n")
                foodcheck()

        else:
                print("---[FOOD]---")
                print("Not time to check food bowl.\n")
        #---------------------
        #Water ---------------
        #Checks to see if current minute is 0 (indicating that it is the start of the hour)
        current_minute = datetime.datetime.now().minute
        if current_minute == 0:
                watercheck()

        elif test_wrange is True:
                print("\n\nTesting water bowl in progress:\n")
                watercheck()

        else:
                print("---[WATER]---")
                print("Not time to check water bowl.")
        #---------------------

        print("\n---------------------------------------")

        time.sleep(10) #Loops once every minute
